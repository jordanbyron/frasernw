-# multiple controllers use this form
- if @review_item.present?
  %script{"type" => "text/javascript"}
    :plain
      // pass variables to the review script
      window.pathways = window.pathways || {};
      (function( formData ) {
        formData.baseReviewItem = #{@review_item.transformed_base_object(@specialist) || 'null'};
        formData.reviewItem = #{@review_item.transformed_review_object(@specialist) || 'null'};
        formData.maxLocations = #{Specialist::MAX_OFFICES};
        formData.interactionType = "#{@form_modifier.interaction_type.to_s}";
        formData.recordKey = "specialist";
      }( window.pathways.formData = {} ));

  = javascript_include_tag "views/form_review"


- if @specialization
  %script{"type" => "text/javascript"}
    :plain
      $(document).ready(function()
      {
        var specialty_checkbox_id = "#specialist_specialization_ids_#{@specialization.id}";
        $(specialty_checkbox_id).prop("checked", true);
      });

- if @form_modifier.token_edit?
  .alert.alert-info
    %h3 You are editing #{@specialist.name}'s entry in Pathways.
    %p.space.no_indent If you have any questions while editing, please contact #{ @specialist.owners.map{|owner| "#{owner.name} at #{mail_to owner.email}"}.join(' or ').html_safe }.
    %p.space.no_indent This database exists to make our practices and your practice more efficient. By providing the information requested below you are making it easier for family doctors to find your practice, ensuring that the scope of your practice is fully understood, and guiding offices in providing you with the correct information when making referrals.
    %p.space.no_indent Unless otherwise indicated, all provided information will be available to all users of Pathways.
- elsif @form_modifier.admin_review?
  = review_warning(@review_item)
- elsif @form_modifier.admin_rereview?
  = rereview_warning(@review_item)

= simple_nested_form_for @specialist, :url => {:controller => params[:controller], :action => @form_modifier.form_action}, :method => @form_modifier.method, :html => { :class => "form-horizontal ajax specialist_form" } do |f|
  - if not f.error_messages.blank?
    .alert.alert-error= f.error_messages

  %h3 General Information

  - categorization_hash = {}
  - categorization_divisions = @specialist.divisions.blank? ? @form_modifier.divisions : @specialist.divisions
  - categorization_specializations = @specialization.present? ? [@specialization] : @specialist.specializations
  - categorization_specializations.map{ |sp| sp.specialization_options.for_divisions(categorization_divisions) }.flatten.uniq.each{ |so| categorization_hash.merge!(so.specialist_categorization_hash) }

  = f.input :firstname
  = f.input :lastname
  = f.input :goes_by_name, :hint => "A name which colleagues refer to the specialist with, if different from his or her formal first name. E.g. \"Bill\" when the first name is \"William\""
  = f.input :sex_mask, as: :select, collection: Specialist::SEX_HASH, label_method: :last, value_method: :first, :include_blank => false
  = f.input :billing_number, :as => :string, :input_html => { :value => @specialist.billing_number_padded }
  .no-print
    = f.input :categorization_mask, as: :select, collection: categorization_hash, label_method: :last, value_method: :first, :include_blank => false
  = f.input :is_gp
  .no-print
    = f.association :specializations,
      as: :check_boxes,
      hint: @form_modifier.specializations_hint,
      disabled: @form_modifier.restrict_editing?,
      label: @form_modifier.specializations_label_text
    - if @form_modifier.show_comment_boxes?
      = f.input :specializations_comments,
        label: @form_modifier.specialization_comments_label,
        input_html: {value: ""},
        as: :text

  #section_hospital_clinic_details

    %hr

    %h3 Details

    = f.input :hospital_clinic_details

  #section_contact

    %hr

    %h3 Office Contact Information

    .tabbable.location_tabs
      %ul.nav.nav-tabs
        - @specialist.ordered_specialist_offices.each_with_index do |so, index|
          = tablist_item active: index == 0, emphasized: !so.empty?, class: ["location_#{index}"] do
            %a{"href" => "#location_tab_#{index}", "data-toggle" => "tab"}
              %span
                = "Location #{index+1}"

    .tab-content
      - index = 0
      = f.simple_fields_for :specialist_offices,
        @specialist.ordered_specialist_offices,
        nested_wrapper: false do |so|
        .tab-pane{:class => (index == 0) ? "active" : "", :id => "location_tab_#{index}"}
          %h4.print-only= "Location #{index+1}"
          .control-group.no-print
            %label.control-label Location is
            .controls
              - location_class = "location_#{index}"
              - if @form_modifier.new_record?
                - [['Not used', true], ['In an existing office', false], ['In a new standalone office', false], ['In a new office in a hospital', false], ['In a new office in a clinic', false]].each do |option|
                  = label_tag "#{location_class}_#{option.first}" do
                    = radio_button_tag location_class,
                      option.first,
                      option.second,
                      :class => [location_class, "location"]
                    = option.first
              - else
                - is_location = so.object.present? && !so.object.empty?
                - [['Not used', !is_location], ['In an office', is_location]].each do |option|
                  = label_tag "#{location_class}_#{option.first}" do
                    = radio_button_tag location_class,
                      option.first,
                      option.second,
                      :class => [location_class, "location"]
                    = option.first
          %div{:class => "numbers_#{index}"}
            = so.input :phone do
              = so.input_field :phone, :class => "span3"
              .span1
                ext:
              = so.input_field :phone_extension, :class => "span1"
            = so.input :fax, :input_html => { :class => "span3" }
            = so.input :direct_phone, :hint => "For physician use only" do
              = so.input_field :direct_phone, :class => "span3"
              .span1
                ext:
              = so.input_field :direct_phone_extension, :class => "span1"
            = so.input :email, :input_html => { :class => "span3" }, :hint => "For physician office use only"
            = so.input :public_email, :input_html => { :class => "span3" }, :hint => "Okay for patient use to contact your office"
            = so.input :url, :input_html => { :class => "span3" }
          %div.no-print{:class => "office_#{index}"}
            = so.association :office,
              as: :select,
              collection: @offices,
              include_blank: true,
              input_html: { :class => "chzn-select no-print" },
              disabled: @form_modifier.restrict_editing?
            - if @form_modifier.show_comment_boxes?
              = so.input :comments,
                label: "If you have any updates to your office, please enter them here",
                input_html: {value: ""},
                as: :text
          .control-group.print-only
            %label.control-label Address
            .controls
              - text_address = so.object.location.resolved_address.address if so.object.location.present? && so.object.location.resolved_address.present?
              %input{"type" => "text", "value" => "#{text_address}"}
          - if @form_modifier.new_record?
            = so.simple_fields_for :office, :nested_wrapper => false do |o|
              = o.simple_fields_for :location, :nested_wrapper => false do |l|
                %div{:class => "address_#{index}"}
                  = l.simple_fields_for :address do |a|
                    = a.input :suite, :input_html => { :class => "span1" }
                    = a.input :address1
                    = a.input :address2
                    = a.association :city,
                      as: :select,
                      collection: City.all_formatted_for_select,
                      include_blank: true
                    = a.input :postalcode, :input_html => { :class => "span1" }
                %div{:class => "hospital_#{index}"}
                  = l.association :hospital_in,
                    as: :select,
                    collection: Hospital.all_formatted_for_select,
                    :include_blank => true
                %div{:class => "clinic_#{index}"}
                  = l.association :location_in, as: :select, collection: @specializations_clinics, :include_blank => true
                %div{:class => "details_#{index}"}
                  = l.input :suite_in, :input_html => { :class => "span1" }
                  = l.input :details_in
          %div{:class => "universal_#{index}"}
            = so.input :open_saturday, wrapper: :bootstrap_tight
            = so.input :open_sunday
            = so.input :location_opened, as: :select, collection: (["Prior to 2010"] + (2010..Time.now.year+1).to_a), prompt: "Select ..."
            = so.input :sector_mask, as: :radio_buttons, collection: SpecialistOffice::SECTOR_HASH, label_method: :last, value_method: :first, :include_blank => false

            %h4 What days and times are your phone lines open?
            = so.simple_fields_for :phone_schedule, :nested_wrapper => false do |s|
              - [:monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday].each do |day|
                = s.simple_fields_for day, :nested_wrapper => false do |d|
                  .changed_wrapper
                    = d.input :scheduled, :label => day.to_s.capitalize_first_letter, wrapper: :bootstrap_tight do
                      = d.input_field :scheduled, :class => "scheduled span1"
                      .hours.no-print
                        .changed_wrapper
                          .from from
                          = d.input_field :from, :class => "auto no-print", :minute_step => 15, :include_blank => true
                        .changed_wrapper
                          .to to
                          = d.input_field :to, :class => "auto no-print", :minute_step => 15, :include_blank => true
                      .break.no-print
                        .changed_wrapper
                          .from closed for lunch from
                          = d.input_field :break_from, :class => "auto no-print", :minute_step => 15, :include_blank => true
                        .changed_wrapper
                          .to to
                          = d.input_field :break_to, :class => "auto no-print", :minute_step => 15, :include_blank => true
                      .print-only
                        from:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to:

            %script{"type" => "text/javascript"}
              :plain
                $(".scheduled").each(scheduled_changed)

          %script{"type" => "text/javascript"}
            :plain
              $(document).ready( address_location_changed(#{index}) );
          - index += 1
    %script{"type" => "text/javascript"}
      :plain
        $(document).ready( $(".chzn-select").chosen() );

  - if @form_modifier.admin_review? || @form_modifier.admin_rereview?
    = f.input :address_update,
      label: "DEPRECATED old address comments field (this field is no longer provided to users, see new 'per office' fields above)",
      input_html: {value: ""}


  - if current_user_is_admin? || @form_modifier.token_edit?

    #section_moa.no-print

      %hr

      %h3 Senior Office Contact Information
      .alert.alert-info
        %p.no_indent Please note: the following Senior office contact information is never shown on Pathways to users.
        %p.space.no_indent It will only be used for contact by Pathways administrators related to keeping your office's information up-to-date.

      = f.input :contact_name
      = f.input :contact_email
      = f.input :contact_phone
      - if current_user_is_admin?
        = f.input :contact_notes, hint: "Include contact's role (MOA, etc.) and anything else we should know."

  #section_status

    %hr

    %h3 Status
    = f.input :status_mask, as: :select, collection: Specialist::STATUS_HASH, label_method: :last, value_method: :first
    #availability.no-print
      = f.input :unavailable_from, label: false, wrapper: false, input_html: { class: "unavailable_from", style: "display:none" }
      %span.unavailable_to{ style: "display:none" }
        to
      = f.input :unavailable_to, label: false, wrapper: false, input_html: { class: "unavailable_to", style: "display:none" }
      %script{"type" => "text/javascript"}
        :plain
          $("#specialist_status_mask").each( status_changed );
    = f.input :status_details
    = f.input :practise_limitations
    = f.association :languages, as: :check_boxes, :item_wrapper_class => 'inline'
    = f.input :interpreter_available

  #section_aop

    %hr

    %h3 Areas of Practice
    = f.input :required_investigations, :hint => "eg. XRs, MRIs, scans, blood work, etc."

    %hr{ "style" => "visibility:hidden" }

    %h4 Accepts Referrals For

    .content
      .row
        .span4
          %strong Referrals accepted in the following areas of practice.
        .span4
          %strong Additional information/investigations required for the specified area of practice.
        .span2
          %strong Lag Time
        .span2
          %strong Wait Time

      - @capacities.each do |c|
        .row.spaced
          .span4.changed_wrapper{:class => "pad#{c[:offset]}"}
            %label{"for" => "capacities_mapped_#{c[:id]}"}
              -# send 0 as unchecked value
              = hidden_field_tag "capacities_mapped[#{c[:id]}]", 0, id: "capacities_mapped_#{c[:id]}_hidden"
              = check_box_tag "capacities_mapped[#{c[:id]}]", 1, c[:mapped], :class => "capacity"
              = c[:name]
          .span4.changed_wrapper= text_field_tag "capacities_investigations[#{c[:id]}]", c[:investigations], :class => "span4"
          - if c[:custom_wait_time]
            .span2.changed_wrapper.lagtime= select_tag "capacities_lagtime[#{c[:id]}]", options_from_collection_for_select(Specialist::LAGTIME_HASH, :first, :last, c[:lagtime]), :class => "span2", :include_blank => true
            .span2.changed_wrapper.waittime= select_tag "capacities_waittime[#{c[:id]}]", options_from_collection_for_select(Specialist::WAITTIME_HASH, :first, :last, c[:waittime]), :class => "span2", :include_blank => true

    %hr{ "style" => "visibility:hidden" }

    = f.input :interest, as: :text
    = f.input :not_performed, as: :text

  #section_referrals

    %hr

    %h3 Referral Details
    %label How does the office accept requests for standard referrals?
    = f.input :referral_fax, as: :boolean, wrapper: :bootstrap_tight
    = f.input :referral_phone, as: :boolean, wrapper: :bootstrap_tight
    -#= f.association :referral_clinic, as: :select, :prompt => "None", :include_blank => true
    = f.input :referral_other_details
    = f.input :referral_details
    = f.input :referral_form_mask, as: :radio_buttons, collection: Specialist::BOOLEAN_HASH, label_method: :last, value_method: :first, :label => "Does the office have a referral form?", :hint => @form_modifier.token_edit? ? "If you would like to add or correct any referral forms, please email them to #{ @specialist.owners.map{|owner| "#{owner.name} at #{mail_to owner.email}"}.join(' or ') }".html_safe : ""

    - if @form_modifier.token_edit? && @specialist.referral_form_mask == 1 && @specialist.referral_forms.reject{ |referral_form| referral_form.form.blank? }.present?

      .control-group
        .controls

          %ul
            - @specialist.referral_forms.each do |referral_form|
              - next if not referral_form.form.present?
              - type = referral_form.form_content_type.split('/').last
              %li= link_to "#{referral_form.description} (#{type})", referral_form.form.url, :target => "_blank"

    = f.input :lagtime_mask, as: :select, collection: Specialist::LAGTIME_HASH, label_method: :last, value_method: :first

    = f.input :waittime_mask, as: :select, collection: Specialist::WAITTIME_HASH, label_method: :last, value_method: :first

    %label Our office will respond to referral requests:
    = f.input :respond_by_fax, as: :boolean, wrapper: :bootstrap_tight
    = f.input :respond_by_phone, as: :boolean, wrapper: :bootstrap_tight
    = f.input :respond_by_mail, as: :boolean, wrapper: :bootstrap_tight
    = f.input :respond_to_patient, as: :boolean

    = f.input :patient_can_book_mask, as: :radio_buttons, collection: Specialist::BOOLEAN_HASH, label_method: :last, value_method: :first
    = f.input :red_flags, as: :text

    %label Optimal method of referral for urgent appointments:
    = f.input :urgent_fax, as: :boolean, wrapper: :bootstrap_tight
    = f.input :urgent_phone, as: :boolean, wrapper: :bootstrap_tight
    = f.input :urgent_other_details
    = f.input :urgent_details

  #section_for_patients

    %hr

    %h3 Information for Patients

    .alert.alert-info
      %p.no_indent Please note: the following information will be made available to patients when the 'Print Information for Patients' button is used.

    = f.input :patient_instructions, hint: "e.g. call two days in advance to confirm, bring a list of medications."
    = f.input :cancellation_policy

  #section_associations

    %hr

    %h3 Associations

    = f.association :hospitals, as: :check_boxes, collection: @hospitals

    = f.association :clinic_locations, as: :check_boxes, collection: @specializations_clinic_locations

  = hidden_field_tag :pre_edit_form_data

  = render 'reviewables/notes_fields',
    form_modifier: @form_modifier,
    reviewable: @specialist,
    review_item: @review_item,
    user: current_user,
    form: f

  .form-actions
    - if @form_modifier.token_edit?
      = f.button :submit, 'Update Specialist with My Changes', :class => "btn btn-primary"
      = f.button :submit, 'There are No Updates to this Specialist', :class => "btn btn-success", :name => 'no_updates'
    - elsif @form_modifier.admin_rereview?
      = link_to "Back to record", specialist_path(@specialist), class: "btn btn-primary"
    - else
      = f.button :submit, :class => "btn btn-primary"
      = link_to 'Cancel', @form_modifier.cancel_path, :class => "btn btn-danger ajax"

%script{"type" => "text/javascript"}
  :plain
    $(document).ready(function() {
      $("select").not('.no-print').each(function(i){
        var $el = $(this);
        var $options = $el.find("option");
        $el.after("<div class='print-only'><ul id=sel"+i+"></ul></div>");
        var $curPrintBox = $("#sel"+i);
        $options.each(function() {
          var selected = $(this).prop('selected') ? "class='selected'" : "";
          $curPrintBox.append("<li " + selected + ">"+$(this).text()+"</li>");
        });
      });
    });
    $(document).ready( $("#specialist_categorization_mask").each(specialist_categorization_changed) );

- content_for(:javascript_footer) do
  = javascript_include_tag "views/location_tabs"
  = javascript_include_tag "views/form_data_manager"
