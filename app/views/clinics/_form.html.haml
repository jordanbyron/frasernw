- if @review_item.present?
  %script{"type" => "text/javascript"}
    :plain
      // pass variables to the review script
      window.pathways = window.pathways || {};
      (function( formData ) {
        formData.baseReviewItem = #{@review_item.transformed_base_object(@clinic) || 'null'};
        formData.reviewItem = #{@review_item.transformed_review_object(@clinic) || 'null'};
        formData.maxLocations = #{Clinic::MAX_LOCATIONS};
        formData.interactionType = "#{@form_modifier.interaction_type.to_s}";
        formData.recordKey = "clinic";
      }( window.pathways.formData = {} ));

  = javascript_include_tag "views/form_review"

- if @specialization
  %script{"type" => "text/javascript"}
    :plain
      $(document).ready(function()
      {
        var specialty_checkbox_id = "#clinic_specialization_ids_#{@specialization.id}";
        $(specialty_checkbox_id).prop("checked", true);
      });

- if @form_modifier.token_edit?
  .alert.alert-info
    %h3 You are editing #{@clinic.name}'s entry in Pathways.
    %p.space.no_indent If you have any questions while editing, please contact #{ @clinic.owners.map{|owner| "#{owner.name} at #{mail_to owner.email}"}.join(' or ').html_safe }.
    %p.space.no_indent This database exists to make our practices and your clinic more efficient. By providing the information requested below you are making it easier for family doctors to find your clinic, ensuring that the scope of your clinic is fully understood, and guiding offices in providing you with the correct information when making referrals.
    %p.space.no_indent Unless otherwise indicated, all provided information will be available to all users of Pathways.
- elsif @form_modifier.admin_review?
  = review_warning(@review_item)
- elsif @form_modifier.admin_rereview?
  = rereview_warning(@review_item)

= simple_nested_form_for @clinic, :url => {:controller => params[:controller], :action => @form_modifier.form_action}, :method => @form_modifier.method, :html => { :class => "form-horizontal ajax clinic_form" } do |f|
  - if not f.error_messages.blank?
    .alert.alert-error= f.error_messages

  %h3 General Information
  = f.input :name
  .no-print
    = f.input :categorization_mask, as: :select, collection: Clinic::CATEGORIZATION_HASH, label_method: :last, value_method: :first, :include_blank => false
  .no-print
    = f.association :specializations,
      as: :check_boxes,
      hint: @form_modifier.specializations_hint,
      disabled: @form_modifier.restrict_editing?,
      label: @form_modifier.specializations_label_text
    - if @form_modifier.show_comment_boxes?
      = f.input :specializations_comments,
        label: @form_modifier.specialization_comments_label,
        input_html: {value: ""},
        as: :text

  #section_contact

    %hr

    %h3 Clinic Contact Information

    - clocs = @clinic.ordered_clinic_locations

    .tabbable.location_tabs
      %ul.nav.nav-tabs
        - clocs.each_with_index do |cl, index|
          = tablist_item active: index == 0, emphasized: cl.has_data?, class: ["clinic_location_#{index}"] do
            %a{"href" => "#location_tab_#{index}", "data-toggle" => "tab"}
              %span
                = "Location #{index+1}"

    .tab-content
      - index = 0
      = f.simple_fields_for :clinic_locations, clocs, :nested_wrapper => false do |cl|
        - cloc = clocs[index]
        - loc = cloc.location
        - is_unused = cloc.empty?
        - is_standalone = !is_unused && !loc.in_hospital?
        - is_in_hospital = !is_unused && loc.in_hospital?
        .tab-pane{:class => (index == 0) ? "active" : "", :id => "location_tab_#{index}"}
          %h4.print-only= "Location #{index+1}"
          .control-group.no-print
            %label.control-label Location is
            .controls
              - location_class = "clinic_location_#{index}"
              - [['Not used', is_unused], ['Standalone', is_standalone], ['In a hospital', is_in_hospital]].each do |option|
                = label_tag "#{location_class}_#{option.first}" do
                  = radio_button_tag location_class,
                    option.first,
                    option.second,
                    :class => [location_class, "location"]
                  = option.first
          %div{:class => "numbers_#{index}"}
            = cl.input :phone do
              = cl.input_field :phone, :class => "span3"
              .span1
                ext:
              = cl.input_field :phone_extension, :class => "span1"
            = cl.input :fax, :input_html => { :class => "span3" }
            = cl.input :contact_details
            = cl.input :email, :input_html => { :class => "span3" }, :hint => "For physician office use only"
            = cl.input :public_email, :input_html => { :class => "span3" }, :hint => "Okay for patient use to contact your office"
            = cl.input :url, :input_html => { :class => "span3" }
          .control-group.print-only
            %label.control-label Address
            .controls
              - text_address = cloc.location.resolved_address.address if cloc.location.present? && cloc.location.resolved_address.present?
              %input{"type" => "text", "value" => "#{text_address}"}
          = cl.simple_fields_for :location, :nested_wrapper => false do |l|
            %div{:class => "address_#{index}"}
              = l.simple_fields_for :address do |a|
                = a.input :suite,
                  input_html: { :class => "span1" },
                  disabled: @form_modifier.restrict_editing?
                = a.input :address1,
                  disabled: @form_modifier.restrict_editing?
                = a.input :address2,
                  disabled: @form_modifier.restrict_editing?
                = a.association :city,
                  as: :select,
                  collection: City.all_formatted_for_select,
                  include_blank: true,
                  disabled: @form_modifier.restrict_editing?
                = a.input :postalcode,
                  :input_html => { :class => "span1" },
                  disabled: @form_modifier.restrict_editing?
            %div{:class => "hospital_#{index}"}
              = l.association :hospital_in,
                as: :select,
                collection: Hospital.all_formatted_for_select,
                include_blank: true,
                disabled: @form_modifier.restrict_editing?
            %div{:class => "details_#{index}"}
              = l.input :suite_in,
                input_html: { :class => "span1" },
                disabled: @form_modifier.restrict_editing?
              = l.input :details_in,
                disabled: @form_modifier.restrict_editing?
            - if @form_modifier.show_comment_boxes?
              = l.input :comments,
                label: "If you have any updates to your address, please enter them here",
                input_html: {value: ""},
                as: :text
          %div{:class => "universal_#{index}"}
            = cl.input :location_opened, as: :select, collection: (["Prior to 2010"] + (2010..Time.now.year+1).to_a), prompt: "Select ..."
            = cl.input :sector_mask, as: :radio_buttons, collection: ClinicLocation::SECTOR_HASH, label_method: :last, value_method: :first, :include_blank => false
            = cl.input :wheelchair_accessible_mask, as: :radio_buttons, collection: Clinic::BOOLEAN_HASH, label_method: :last, value_method: :first

            %h4 Location schedule

            = cl.simple_fields_for :schedule, :nested_wrapper => false do |s|
              - [:monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday].each do |day|
                = s.simple_fields_for day, :nested_wrapper => false do |d|
                  .changed_wrapper
                    = d.input :scheduled, :label => day.to_s.capitalize_first_letter, wrapper: :bootstrap_tight do
                      = d.input_field :scheduled, :class => "scheduled span1"
                      .hours.no-print
                        .changed_wrapper
                          .from from
                          = d.input_field :from, :class => "auto no-print", :minute_step => 15, :include_blank => true
                        .changed_wrapper
                          .to to
                          = d.input_field :to, :class => "auto no-print", :minute_step => 15, :include_blank => true
                      .print-only
                        from:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to:

          %script{"type" => "text/javascript"}
            :plain
              $(document).ready( clinic_address_location_changed(#{index}) );
          - index += 1

    %script{"type" => "text/javascript"}
      :plain
        $(".scheduled").each(scheduled_changed)

    %script{"type" => "text/javascript"}
      :plain
        $(document).ready( $(".chzn-select").chosen() );

  - if current_user_is_admin? || @form_modifier.token_edit?

    #section_moa.no-print

      %hr

      %h3 Senior Office Contact Information
      .alert.alert-info
        %p.no_indent Please note: the following Senior office contact information is never shown on Pathways to users.
        %p.space.no_indent It will only be used for contact by Pathways administrators related to keeping your office's information up-to-date.
      = f.input :contact_name
      = f.input :contact_email
      = f.input :contact_phone
      - if current_user_is_admin?
        = f.input :contact_notes, hint: "Include contact's role (MOA, etc.) and anything else we should know."

  #section_status

    %hr

    %h3 Status
    = f.input :status_mask, as: :select, collection: Clinic::STATUS_HASH, label_method: :last, value_method: :first
    #availability.no-print
      = f.input :unavailable_from, label: false, wrapper: false, input_html: { class: "unavailable_from", style: "display:none" }
      %script{"type" => "text/javascript"}
        :plain
          $("#specialist_status_mask").each( status_changed );
    = f.input :status_details
    = f.input :limitations
    = f.association :languages, as: :check_boxes, :item_wrapper_class => 'inline'
    = f.input :interpreter_available

  #section_aop

    %hr

    %h3 Areas of Practice
    = f.input :required_investigations, :hint => "eg. XRs, MRIs, scans, blood work, etc."

    %hr{ "style" => "visibility:hidden" }

    %h4 Pertinent Areas of Practice/Expertise

    .content
      .row
        .span4
          %strong Referrals accepted in the following areas of practice.
        .span4
          %strong Additional information/investigations required for the specified area of practice.
        .span2
          %strong Lag Time
        .span2
          %strong Wait Time

      - @focuses.each do |f|
        .row.spaced
          .span4.changed_wrapper{:class => "pad#{f[:offset]}"}
            %label{"for" => "focuses_mapped_#{f[:id]}"}
              -# send 0 as unchecked value
              = hidden_field_tag "focuses_mapped[#{f[:id]}]",
                0,
                id: "focuses_mapped_#{f[:id]}_hidden"
              = check_box_tag "focuses_mapped[#{f[:id]}]", 1, f[:mapped], :class => "focus"
              = f[:name]
          .span4.changed_wrapper= text_field_tag "focuses_investigations[#{f[:id]}]", f[:investigations], :class => "span4"
          - if f[:custom_wait_time]
            .span2.changed_wrapper.lagtime= select_tag "focuses_lagtime[#{f[:id]}]", options_from_collection_for_select(Clinic::LAGTIME_HASH, :first, :last, f[:lagtime]), :class => "span2", :include_blank => true
            .span2.changed_wrapper.waittime= select_tag "focuses_waittime[#{f[:id]}]", options_from_collection_for_select(Clinic::WAITTIME_HASH, :first, :last, f[:waittime]), :class => "span2", :include_blank => true

    %hr{ "style" => "visibility:hidden" }

    = f.input :not_performed, as: :text

  #section_referrals

    %h3 Referral Details

    %label How does this clinic accept requests for standard referrals?
    = f.input :referral_fax, as: :boolean, wrapper: :bootstrap_tight
    = f.input :referral_phone, as: :boolean, wrapper: :bootstrap_tight
    = f.input :referral_other_details
    = f.input :referral_details

    = f.input :referral_form_mask, as: :radio_buttons, collection: Clinic::BOOLEAN_HASH, label_method: :last, value_method: :first, :label => "Does this clinic have a referral form?", :hint => @form_modifier.token_edit? ? "If you would like to add or correct any referral forms, please email them to #{ @clinic.owners.map{|owner| "#{owner.name} at #{mail_to owner.email}"}.join(' or ') }".html_safe : ""

    - if @form_modifier.token_edit? && @clinic.referral_form_mask == 1 && @clinic.referral_forms.reject{ |referral_form| referral_form.form.blank? }.present?

      .control-group
        .controls

          %ul
            - @clinic.referral_forms.each do |referral_form|
              - next if not referral_form.form.present?
              - type = referral_form.form_content_type.split('/').last
              %li= link_to "#{referral_form.description} (#{type})", referral_form.form.url, :target => "_blank"

    = f.input :lagtime_mask, as: :select, collection: Clinic::LAGTIME_HASH, label_method: :last, value_method: :first

    = f.input :waittime_mask, as: :select, collection: Clinic::WAITTIME_HASH, label_method: :last, value_method: :first

    %label Our clinic will respond to referral requests:
    = f.input :respond_by_fax, as: :boolean, wrapper: :bootstrap_tight
    = f.input :respond_by_phone, as: :boolean, wrapper: :bootstrap_tight
    = f.input :respond_by_mail, as: :boolean, wrapper: :bootstrap_tight
    = f.input :respond_to_patient, as: :boolean

    = f.input :patient_can_book_mask, as: :radio_buttons, collection: Clinic::BOOLEAN_HASH, label_method: :last, value_method: :first

    = f.input :red_flags, as: :text

    %label Optimal method of referral for urgent appointments
    = f.input :urgent_fax, as: :boolean, wrapper: :bootstrap_tight
    = f.input :urgent_phone, as: :boolean, wrapper: :bootstrap_tight
    = f.input :urgent_other_details
    = f.input :urgent_details

  #section_for_patients

    %hr

    %h3 Information for Patients

    .alert.alert-info
      %p.no_indent Please note: the following information will be made available to patients when the 'Print Information for Patients' button is used.

    = f.input :patient_instructions, hint: "e.g. call two days in advance to confirm, bring a list of medications."
    = f.input :cancellation_policy

  #section_associations

    - if current_user_is_admin? && !@form_modifier.token_edit?

      %hr

      %h3 Associations

      .content

      - @clinic.clinic_locations.reject{|cl| cl.empty?}.each do |cl|

        %h4 Physicians Who See Patients at #{cl.location.short_address}

        = f.simple_fields_for :clinic_locations, cl do |clf|
          .row.spaced
            .span1.no-print Specialist?
            .span2 Name
            .span5 Area of focus (if not the same for all physicians working in the clinic).
          = clf.simple_fields_for :attendances do |i|
            .row.spaced
              .span1.no-print
                = i.input :is_specialist, label: false, wrapper: :no_wrapper, input_html: { class: "is_specialist span1 no-print" }
              .span2
                = i.association :specialist, as: :select, label: false, collection: @clinic_specialists, prompt: 'Select ...', wrapper: :no_wrapper, input_html: { class: "specialist_list span2 no-print force-print" }
                = i.input :freeform_firstname, label: false, wrapper: :no_wrapper, input_html: { class: "freeform span2", style: "display:none" }
              .span5
                = i.input :area_of_focus, label: false, wrapper: :no_wrapper, input_html: { class: "span5" }
              .spanhalf.no-print
                = i.hidden_field :_destroy
                = i.link_to_remove "<i class='icon-minus-sign'></i>".html_safe, :class => "spanhalf"

          .row.no-print
            = clf.link_to_add( "<i class='icon-plus-sign'></i>".html_safe + " Add another physician", :attendances, class: "btn offset3")

      %script{"type" => "text/javascript"}
        :plain
          $(".is_specialist").each( hideShowPhysicians )

    #section_healthcare_providers

      %hr{ "style" => "visibility:hidden" }

      = f.association :healthcare_providers, as: :check_boxes

    -#section_deprecated.no-print

      %hr

      %h3 Deprecated fields
      %h4
        These are old form fields which may have information in them than now needs to be transferred to fields of the new form. These deprecated fields will not show up on the final site, and are here temporarily to avoid losing previously entered data. As you transfer this information to the other form fields, you might want to delete it from here to avoid confusion.
      = f.input :status
      = f.input :responds_via
      = f.input :interest
      = f.input :referral_criteria

  = hidden_field_tag :pre_edit_form_data
  = render 'reviewables/notes_fields',
    form_modifier: @form_modifier,
    reviewable: @clinic,
    review_item: @review_item,
    user: current_user,
    form: f

  .form-actions
    - if @form_modifier.token_edit?
      = f.button :submit, 'Update Clinic with My Changes', :class => "btn btn-primary"
      = f.button :submit, 'There are No Updates to this Clinic', :class => "btn btn-success", :name => 'no_updates'
    - elsif @form_modifier.admin_rereview?
      = link_to "Back to record", clinic_path(@clinic), class: "btn btn-primary"
    - else
      = f.button :submit, :class => "btn btn-primary"
      = link_to 'Cancel', @form_modifier.cancel_path, :class => "btn btn-danger ajax"

%script{"type" => "text/javascript"}
  :plain
    $(document).ready(function() {
      $("select").not('.no-print').each(function(i){
        var $el = $(this);
        var $options = $el.find("option");
        $el.after("<div class='print-only'><ul id=sel"+i+"></ul></div>");
        var $curPrintBox = $("#sel"+i);
        $options.each(function() {
          var selected = $(this).prop('selected') ? "class='selected'" : "";
          $curPrintBox.append("<li " + selected + ">"+$(this).text()+"</li>");
        });
      });
    });
    $(document).ready( $("#clinic_categorization_mask").each(clinic_categorization_changed) );

- content_for(:javascript_footer) do
  = javascript_include_tag "views/location_tabs"

  - if @form_modifier.token_edit?
    = javascript_include_tag "views/form_data_manager"
