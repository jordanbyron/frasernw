= simple_form_for @sc_item, html: { class: "form-horizontal",
  multipart: true } do |f|
  - if not f.error_messages.blank?
    .alert.alert-error= f.error_messages

  %h3 Content Classification

  = f.association :sc_category,
    as: :select,
    collection: sc_category_ancestry_options(ScCategory.unscoped.arrange(order: 'name'), nil),
    include_blank: false

  .control-group
    .control-label
      Item Specialties & Areas of Practice
    .controls{style: "max-width: none;"}
      - Specialization.all.each do |specialization|
        %label
          = check_box_tag "#{form_target_type(f.object)}[specialization_ids][]",
            specialization.id,
            f.object.specializations.include?(specialization),
            class: "ps-tree-node-input specialty-input",
            "data-ps-tree-id" => "Specialization#{specialization.id}"
          = specialization.name

        .procedures_list
          = nested_procedure_checkboxes(f.object, specialization, specialization.arranged_procedure_specializations(:non_assumed))


  %h3 Content Options

  - if current_user.as_super_admin?
    = f.input :division_id,
      as: :select,
      collection: Division.all,
      include_blank: false
  - elsif current_user.as_divisions.length > 1
    = f.input :division_id,
      as: :select,
      collection: current_user.as_divisions,
      include_blank: false
  - else
    = f.input :division_id,
      as: :hidden,
      input_html: { value: current_user.as_divisions.first.id }

  = f.input :searchable
  = f.input :borrowable
  - if can? :update_demoable, ScItem
    = f.input :demoable, label: "Available in demonstration database"
  = f.input :shared_care

  %h3 Content

  = f.input :title
  = f.input :type_mask,
    as: :select,
    collection: ScItem::TYPE_HASH,
    label_method: :last,
    value_method: :first,
    include_blank: false

  #link_section
    = f.input :url, input_html: { class: "span5" }
  #markdown_section
    = f.input :markdown_content
  #document_section
    = f.input :document, as: :file
  #can_email_section
    = f.input :can_email, input_html: { id: "can-email-input" }

  - if current_user.as_super_admin?
    #evidence_section
      = f.input :evidence_id,
        as: :select,
        collection: Evidence.all,
        label_method: :level,
        value_method: :id

  %h3
    = "History & Notes"
  = render 'history/nodes', item: f.object, nodes: f.object.history
  = render "notes/fields", parent_fields: f, user: current_user

  .form-actions
    = f.button :submit, class: "btn btn-primary"
    = link_to 'Cancel', root_url, class: "btn btn-danger"

  :javascript
    var updateSubtree = function(parentNode){

      var subtreeSelector = (
        "label[data-ps-tree-parent='" +
        parentNode.getAttribute("data-ps-tree-id") +
        "']"
      )
      $(subtreeSelector).each(function(index, childContainer){
        // value/visibility of this checkbox
        // value/visibility of children

        var input = $(childContainer).find(".ps-tree-node-input")[0]

        if (parentNode.checked && $(childContainer).is(":hidden")){
          if(input.getAttribute("data-previous-val") === "true") {
            input.checked = true
          }
          else {
            input.checked = false
          }

          $(childContainer).show();
        }
        else if (!parentNode.checked) {
          input.setAttribute("data-previous-val", input.checked);
          input.checked = false;
          $(childContainer).hide()
        }

        updateSubtree(input);
      })
    }

    $(".specialty-input").each(function(index, elem){
      updateSubtree(elem)
    })

    $(".ps-tree-node-input").change(function(event){
      updateSubtree(event.target)
    })

    $(document).ready(function() {
      $.each($('.specialty_check'), function() { hide_show_procedures(this) });
    });

    $('.specialty_check').click(function() {
      hide_show_procedures(this);
    });

    var type_mask_changed = function()
    {
      if ($(this).val() == 1)
      {
        $("#link_section").show();
        $("#markdown_section").hide();
        $("#document_section").hide();
        if (window.location.pathname == "/content_items/new") {
          $("#can-email-input").attr({"checked" : "checked"});
        }
      }
      else if ($(this).val() == 2)
      {
        $("#link_section").hide();
        $("#markdown_section").show();
        $("#document_section").hide();
      }
      else if ($(this).val() == 3)
      {
        $("#link_section").hide();
        $("#markdown_section").hide();
        $("#document_section").show();
      }
    }

    $(document).ready(function() {
      $("#sc_item_type_mask").each(type_mask_changed);
      $("#sc_item_type_mask").live("change", type_mask_changed);
    });
