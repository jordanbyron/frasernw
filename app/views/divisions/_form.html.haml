= simple_nested_form_for @division, html: { class: "form-horizontal" } do |f|
  - if not f.error_messages.blank?
    .alert.alert-error= f.error_messages

  - if current_user.as_super_admin?
    = f.input :name
    = f.association :cities,
      as: :check_boxes,
      hint: 'The cities that a divisional administrator can administer'

  %h4 Primary Contacts
  %p.no_indent
    These administrators will receive all emails from divisional users who use
    the "Contact Us" link at the bottom of all pages.
  .content
    = f.simple_fields_for :division_primary_contacts do |i|
      .row.spaced
        .span5.offset3
          = i.association :primary_contact,
            as: :select,
            label: false,
            collection: User.admin,
            prompt: 'Select ...',
            wrapper: :no_wrapper
        .spanhalf.offsethalf
          = i.hidden_field :_destroy
          = i.link_to_remove "<i class='icon-minus-sign'></i>".html_safe
  .row
    = f.link_to_add :division_primary_contacts,
      class: "btn offset3" do
      %i.icon-plus-sign
      Add another primary contact

  %br
  %h4 Resource Subscriptions
  %p.no_indent
    Automatically include content items posted by the Provincial team for the
    following:
  %br
  .row
    .span8
      = simple_fields_for @divisional_sc_item_subscription do |j|
        .control-group
          %label.control-label{ for: "division_specialization" }
            %strong All Provincial Content
          .controls
            %label.checkbox
              = check_box_tag "division_specialization",
                1,
                false,
                class: "division_check"
        = j.input :nonspecialized,
          as: :boolean,
          label: "Content with no specialty",
          input_html: { class: "division_specialization" }
        = j.input :specialization_ids,
          as: :check_boxes,
          collection: Specialization.all,
          selected: @divisional_sc_item_subscription.specialization_ids,
          label: "Content by specialty",
          input_html: { class: "division_specialization" },
          hint: "Applies to new or newly modified content items."

  %br
  %h4 Local Referral Area
  .row
    .span2
      %table.local_referral_area.fixed_column
        %thead
          %tr
            %td
            %td All Specialties
        %tbody
          - City.all.each_with_index do |city, index|
            %tr{ class: (index % 2 == 1) && "odd" }
              %th= city.name
              %td= check_box_tag "city_#{city.id}",
                1,
                @local_referral_cities.include?(city.id) && @local_referral_cities[city.id].present?,
                name: "city[#{city.id}]",
                class: "city_check"
    .span10{ style: "overflow-x:scroll" }
      %table.local_referral_area
        %thead
          %tr
            - Specialization.all.each do |specialization|
              %td= specialization.name
        %tbody
          - City.all.each_with_index do |city, index|
            %tr{ class: (index % 2 == 1) && "odd" }
              - Specialization.all.each do |specialization|
                %td
                  = check_box_tag "#{city.id}_#{specialization.id}",
                    1,
                    (@local_referral_cities[city.id].present?) && (@local_referral_cities[city.id].include? specialization.id),
                    name: "local_referral_cities[#{city.id}][#{specialization.id}]",
                    class: "city_#{city.id} city_specialization"

  %br
  %h4 Customize City Priorities
  .row
    %div{ style: "width: 100%; padding-left: 20px;" }
      = f.label :use_customized_city_priorities,
        "Customize City Priorities",
        style: "display: inline-block; font-weight: bold;"
      = f.check_box :use_customized_city_priorities,
        style: "margin-left: 10px; margin-bottom: 7px;"
      %p{ style: "margin-left: 0px;" }
        %i
          If enabled, cities will be sorted on specialization pages by the
          rankings below. When new cities are added they will automatically be
          assigned the lowest priority rating (3). If this feature is disabled,
          the local referral area for that specialization will be used to sort
          by city instead. (Cities outside of your referral area will appear
          after those inside it)
      %br
      #city_priority_checkboxes
        %p{ style: "margin-left: 0px;" }
          %strong City Priority Customization
        - @city_priorities.each do |priority|
          %div{ style: "margin-top: 10px; display: inline-block; width: 100px;" }
            = label_tag "city_priorities[#{priority[:city_id]}]",
              priority[:city_name]
            = select_tag "city_priorities[#{priority[:city_id]}]",
              priority[:options_for_select].html_safe,
              style: "width: 100px;"

  .form-actions
    = f.button :submit, class: "btn btn-primary"
    %a.btn.btn-danger{ href: divisions_path } Cancel

:javascript
  window.pathways.checkboxSlidedown({
    contentContainerId: "city_priority_checkboxes",
    checkboxId: "division_use_customized_city_priorities"
  })

  var updateMasterFromConstituents = function(
    masterSelector,
    constituentSelector
  ) {
    if ($(constituentSelector).toArray().every(
      function(elem){ return $(elem).prop("checked");})) {

      $(masterSelector).prop('checked', true);
      $(masterSelector).prop('indeterminate', false);

    } else if ($(constituentSelector).toArray().every(
      function(elem){ return !$(elem).prop("checked");})) {

      $(masterSelector).prop('checked', false);
      $(masterSelector).prop('indeterminate', false);

    } else {

      $(masterSelector).prop('checked', true);
      $(masterSelector).prop('indeterminate', true);
    }
    return true;
  }

  var updateConstituentsFromMaster = function(
    masterSelector,
    constituentSelector
  ) {
    if ($(masterSelector).prop('checked')){
      $(constituentSelector).prop('checked', true);
    }
    else {
      $(constituentSelector).prop('checked', false);
    }
  }

  var setupMasterConstituentRelationship = function(
    masterSelector,
    constituentSelector
  ){
    updateMasterFromConstituents(masterSelector, constituentSelector)

    $(masterSelector).click(updateConstituentsFromMaster.bind(
      null,
      masterSelector,
      constituentSelector
    ))

    $(constituentSelector).click(updateMasterFromConstituents.bind(
      null,
      masterSelector,
      constituentSelector
    ))
  }

  setupMasterConstituentRelationship(
    "#division_specialization",
    ".division_specialization"
  );

  $(".city_check").each(function(index, elem){
    setupMasterConstituentRelationship(
      ("#" + elem.id),
      ("." + elem.id)
    );
  })
