/ Form Notes:
/   .all-updates = form options relevant to all subscription types
/   .news-updates = form options for news_update classifiation
/   .content-item-updates = form options for resource_update classification
/   f.input :all_ + method_name form fields are fake checkboxes used for Javascript selectors

= simple_form_for @subscription,
  html: {class: 'form-horizontal'},
  label: :none do |f|
  = f.error_notification

  .form-inputs
    %h2
      This Custom Notification is for:
    = f.input :target_class,
      as: :radio_buttons,
      collection: Subscription::TARGET_CLASSES,
      label_method: :last,
      value_method: :first,
      include_blank: false,
      label: "Pick an notification type:"

    = f.input :user_id, as: :hidden
    .news-updates
      %hr
      %h2
        Receive News Updates on these topics:

      = f.input :all_news_types,
        label: "All News Items",
        as: :fake_string,
        input_html: { value: nil, type: "checkbox"}
      = f.input :news_type,
        as: :check_boxes,
        collection: NewsItem.type_hash_as_form_array,
        label_method: :last,
        value_method: :first,
        include_blank: false,
        label: "Only for:",
        input_html: {class: "news_type-option"}

    .content-item-updates
      %hr
      %h2
        Notify me of changes to these Content Categories:

      = f.input :all_sc_categories,
        label: "All Content Categories",
        as: :fake_string,
        input_html: { value: nil, type: "checkbox"}
      = f.association :sc_categories,
        as: :check_boxes,
        collection: ScCategory.all_for_subscription,
        label_method: :name,
        value_method: :id,
        presence: true,
        label: "Only for:",
        input_html: {class: "sc_category-option"}

    .content-item-updates
      %hr
      #container
        %h2
          Notify me when Content Items for these Specialties change:

        = f.input :all_specializations,
          label: "All Specialties",
          as: :fake_string,
          input_html: { value: nil, type: "checkbox"}
        = f.association :specializations,
          collection: Specialization.all,
          label_method: :name,
          value_method: :id,
          as: :check_boxes,
          presence: true,
          required: true,
          label: "Only for:",
          input_html: { class: "specialization-option"}

    .content-item-updates
      %hr
      %h2
        When in these formats:

      = f.input :all_sc_item_format_types,
        label: "All Content Formats",
        as: :fake_string,
        input_html: { value: nil, type: "checkbox"}
      = f.input :sc_item_format_type,
        as: :check_boxes,
        collection: ScItem.filter_format_hash_as_form_array,
        label_method: :last,
        value_method: :first,
        include_blank: false,
        label: "Only for:",
        input_html: {class: "sc_item_format_type-option"}

    %hr
    .all-updates
      %h2
        When they affect these Divisions:

      = f.input :all_divisions,
        label: "All Divisions",
        as: :fake_string,
        input_html: { value: nil, type: "checkbox"}
      = f.association :divisions,
        collection: Division.all,
        label_method: :name,
        as: :check_boxes,
        label: "Only for",
        input_html: {class: "division-option"}
      %hr
      %h2
        How Often?:

      = f.input :interval,
        collection: Subscription::INTERVAL_LABELS,
        as: :radio_buttons,
        label: false,
        required: :true,
        label_method: :last,
        value_method: :first
      .form-actions
        = f.button :submit, class: "btn btn-primary"
        = link_to 'Cancel', users_path, class: "btn btn-danger"

:javascript
  $(document).ready(function() {
    if ($("#subscription_target_class_newsitem").is(":checked"))
    {
      $(".content-item-updates").hide();
      $(".news-updates").fadeIn(300).show();

    }
    else if ($("#subscription_target_class_scitem").is(":checked"))
    {
      $(".news-updates").hide();
      $(".content-item-updates").fadeIn(300).show();
    }

       // On page load, make sure "Check All" style checkbox is pre-checked if every choice was already checked

    if ($('.news_type-option').length === $('.news_type-option').filter(':checked').length)
    {
      document.getElementById('all_news_types').checked = 1;
    }
    else if($('.news_type-option').length != $('.news_type-option').filter(':checked').length)
    {
      document.getElementById('all_news_types').checked = 0;
    }

    if ($('.sc_item_format_type-option').length === $('.sc_item_format_type-option').filter(':checked').length)
    {
      document.getElementById('all_sc_item_format_types').checked = 1;
    }
    else if($('.sc_item_format_type-option').length != $('.sc_item_format_type-option').filter(':checked').length)
    {
      document.getElementById('all_sc_item_format_types').checked = 0;
    }

    if ($('.sc_category-option').length === $('.sc_category-option').filter(':checked').length)
    {
      document.getElementById('all_sc_categories').checked = 1;
    }
    else if($('.sc_category-option').length != $('.sc_category-option').filter(':checked').length)
    {
      document.getElementById('all_sc_categories').checked = 0;
    }

    if ($('.specialization-option').length === $('.specialization-option').filter(':checked').length)
    {
      document.getElementById('all_specializations').checked = 1;
    }
    else if($('.specialization-option').length != $('.specialization-option').filter(':checked').length)
    {
      document.getElementById('all_specializations').checked = 0;
    }


    if ($('.division-option').length === $('.division-option').filter(':checked').length)
    {
      document.getElementById('all_divisions').checked = 1;
    }
    else if($('.division-option').length != $('.division-option').filter(':checked').length)
    {
      document.getElementById('all_divisions').checked = 0;
    }

  });
